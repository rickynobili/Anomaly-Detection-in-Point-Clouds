%  Draws spatial and frequency domain figure of LPA kernels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Uses as input a cell array called "kernels_higher_order"
% kernels_higher_order{direction_index,size_index,1} are the kernels (all available orders)
% kernels_higher_order{direction_index,size_index,2} is the degrees matrix (relative to those orders)
%
% These array are usually generated by demo_createLPAKernels.m or function_createLPAKernels.m
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Alessandro Foi - Tampere University of Technology -  2003-2005



directions=size(kernels_higher_order,1);     %%% DO NOT MODIFY THIS LINE
sizes=size(kernels_higher_order,2);          %%% DO NOT MODIFY THIS LINE



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Set here which directions & sizes to draw  (vectors of indices)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
directions_to_draw=1:directions;                   %%%% directions to draw (all directions  1:directions)
sizes_to_draw=1:3:sizes;                    %%%% sizes to draw      (all sizes    1:sizes   )
orders_to_draw=1:4;                       %%%% order of kernel (this is not the real order but the index of the different polynomial order, also note that the same index can correspond to different polynomial orders depending on the size of the kernel)
fftresolution=48;                         %%%%  <---  this sets the number of samples for the fft
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
color_figure=1;                           %%%% set to 1 for color figure, 0 for BW (printer), 10 for color gourad shaded
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%














close all







%%% -------------------------------------------------------------------------------------------------------------
disp(' ')
disp(' Drawing LPA kernels ')

warning_given=0;
for order_index=orders_to_draw




    % checks for order availability among sizes and directions

    order_available=ones(directions,sizes);
    kernels1=cell(directions,sizes);
    for index1=1:directions
        for index2=1:sizes
            if order_index<=size(kernels_higher_order{index1,index2},3)
                kernels1{index1,index2}=kernels_higher_order{index1,index2,1}(:,:,order_index);
                order_available(index1,index2)=1;
            else
                kernels1{index1,index2}=zeros(1);
                order_available(index1,index2)=0;
                %                 disp('missing order')
            end
        end   % end sizes
    end    % end directions





    %%% constructs kernels2 cell array where all kernels have the same "support
    %%% size" (these are used for the spatial domain plots)

    kernels2=cell(directions,sizes);
    for s1=1:size(kernels1,1)
        kernsizes(s1,:)=size(kernels1{s1,size(kernels1,2)});
    end
    for s1=1:size(kernels1,1)
        for s2=1:size(kernels1,2)
            largest=zeros(max(kernsizes(:)));
            diffe1=(size(largest,1)-size(kernels1{s1,s2},1))/2;
            diffe2=(size(largest,2)-size(kernels1{s1,s2},2))/2;
            largest(1+diffe1:size(largest,1)-diffe1,1+diffe2:size(largest,2)-diffe2)=kernels1{s1,s2};
            kernels2{s1,s2}=largest;
        end
    end

    %%% constructs kernels3 cell array of the ffts of kernels (number of
    %%% samples is specified by the fftresolution parameter
    %%% (these are used for the frequency domain plots)

    kernels3=cell(directions,sizes);
    for s1=1:size(kernels1,1)
        for s2=1:size(kernels1,2)
            largest=zeros(size(kernels1{size(kernels1,1),size(kernels1,2)}));
            largest=zeros(max(size(largest,1),1+2*fftresolution),max(size(largest,2),1+2*fftresolution));
            diffe1=(size(largest,1)-size(kernels1{s1,s2},1))/2;
            diffe2=(size(largest,2)-size(kernels1{s1,s2},2))/2;
            largest(1+diffe1:size(largest,1)-diffe1,1+diffe2:size(largest,2)-diffe2)=kernels1{s1,s2};
            kernels3{s1,s2}=largest;
        end
    end
    clear diffe1
    clear diffe2
    clear largest






    % m=max(kernels_higher_order{1,sizes,2}(:,1:2));

    %%%% plots desired figures
    for direction=directions_to_draw;
        for kernelsize=sizes_to_draw;
            if direction<=directions&kernelsize<=sizes&order_available(direction,kernelsize)==1
                xorder=kernels_higher_order{direction,kernelsize,2}(order_index,1);
                yorder=kernels_higher_order{direction,kernelsize,2}(order_index,2);
                kernel=kernels2{direction,kernelsize};
                if (max(kernel(:))>10*eps)|(min(kernel(:))<-10*eps)
                figure
                subplot(2,2,1)
                imagesc([-(size(kernel,1)-1)/2,(size(kernel,1)-1)/2], [-(size(kernel,2)-1)/2,(size(kernel,2)-1)/2],kernel,[-max(abs(kernel(:)))-eps eps+max(abs(kernel(:)))]), colorbar, axis equal tight;
                title(['g_{h,\theta}^{(' , num2str(xorder,3), ',' , num2str(yorder,3),')}      m=(',num2str(max(kernels_higher_order{1,sizes,2}(:,1))), ',',num2str(max(kernels_higher_order{1,sizes,2}(:,2))),'),  \theta=', num2str((direction-1)/directions*360,3), '^o   ( for ^{\partial^' , num2str(xorder+yorder,3), '}/_{\partialx_1^',num2str(xorder,3),'\partialx_2^', num2str(yorder,3), '} )']);
                subplot(2,2,2)
                if color_figure==1
                    mesh(-(size(kernel,1)-1)/2:1:(size(kernel,1)-1)/2, -(size(kernel,2)-1)/2:1:(size(kernel,2)-1)/2, kernel),
                    axis tight
                    caxis([-max(abs(kernel(:)))-eps eps+max(abs(kernel(:)))]);
                end
                if color_figure==10
                    surf(-(size(kernel,1)-1)/2:1:(size(kernel,1)-1)/2, -(size(kernel,2)-1)/2:1:(size(kernel,2)-1)/2, kernel),
                    axis tight
                    caxis([-max(abs(kernel(:)))-eps eps+max(abs(kernel(:)))]);
                    shading interp
                end
                if color_figure==0
                    mesh(-(size(kernel,1)-1)/2:1:(size(kernel,1)-1)/2, -(size(kernel,2)-1)/2:1:(size(kernel,2)-1)/2, kernel),
                    axis tight
                    caxis([eps+max(abs(kernel(:))) 30*(eps+max(abs(kernel(:))))]);
                end
                camproj('perspective');
                subplot(2,2,3)
                kernel=kernels3{direction,kernelsize};
                kernelfft=abs(fftshift(fft2(kernel)));
               % imagesc([-pi,pi],[-pi,pi],(kernelfft),[0 eps+max(kernelfft(:))]), colorbar, axis equal tight;
                title(['|G_{h,\theta}^{(' , num2str(xorder,3), ',' , num2str(yorder,3),')}|']);
                subplot(2,2,4)
                if color_figure==1
                    %mesh(pi*(-(size(kernel,1)-1)/2:(size(kernel,1)-1)/2)./((size(kernel,1)-1)/2), pi*(-(size(kernel,2)-1)/2:(size(kernel,2)-1)/2)./((size(kernel,1)-1)/2), (kernelfft)),
                    caxis([0 eps+max(kernelfft(:))]),
                    shading interp
                end
                if color_figure==10
                    surf(pi*(-(size(kernel,1)-1)/2:(size(kernel,1)-1)/2)./((size(kernel,1)-1)/2), pi*(-(size(kernel,2)-1)/2:(size(kernel,2)-1)/2)./((size(kernel,1)-1)/2), (kernelfft)),
                    caxis([0 eps+max(kernelfft(:))]),
                    shading interp
                end
                if color_figure==0
                    mesh(pi*(-(size(kernel,1)-1)/2:(size(kernel,1)-1)/2)./((size(kernel,1)-1)/2), pi*(-(size(kernel,2)-1)/2:(size(kernel,2)-1)/2)./((size(kernel,1)-1)/2), (kernelfft)),
                    caxis([eps+max(kernelfft(:)) 30*(eps+max(kernelfft(:)))]),
                end
                %axis([-pi pi -pi pi 0 eps+max(kernelfft(:))]);
                camproj('perspective');
                if color_figure==1|color_figure==10
                    colormap(jet)
                else if color_figure==0
                        colormap(gray)
                    else
                        disp('color_figure must be either 0 or 1')
                    end
                end
                end
                drawnow
            else
                if warning_given==0
               %     disp('WARNING: Specified indices exceed the available kernels')
                    warning_given=1;
                end
            end
        end  % sizes
    end   % directions
    clear kernels1 kernels2 kernels3
end % orders
disp(' ')
disp(' ')